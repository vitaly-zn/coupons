{"version":3,"sources":["Models/CredentialsModel.ts","Redux/AuthAppState.ts","Redux/CompaniesAppState.ts","Redux/CompanyAppState.ts","Redux/CouponsAppState.ts","Redux/CustomerAppState.ts","Redux/CustomersAppState.ts","Redux/Store.ts","Components/AdminArea/AdminMenu/AdminMenu.tsx","Components/CompanyArea/CompanyMenu/CompanyMenu.tsx","Components/CustomerArea/CustomerMenu/CustomerMenu.tsx","Components/LayoutArea/Footer/Footer.tsx","Components/AuthArea/AuthMenu/AuthMenu.tsx","Components/LayoutArea/Header/Header.tsx","Assets/Images/Logos/coupon_logo.png","Components/LayoutArea/Logo/Logo.tsx","Components/LayoutArea/MainMenu/MainMenu.tsx","Services/GlobalConfigs.ts","Services/Notifications.ts","Components/AuthArea/Login/Login.tsx","Components/AuthArea/Logout/Logout.tsx","Services/jwtAxios.ts","Components/CompanyArea/AddCompany/AddCompany.tsx","Components/CompanyArea/CompaniesList/CompaniesList.tsx","Assets/Images/Status/no_image_available.png","Components/CouponArea/CouponCard/CouponCard.tsx","Components/CompanyArea/CompanyDetails/CompanyDetails.tsx","Components/CompanyArea/DeleteCompany/DeleteCompany.tsx","Components/CompanyArea/EditCompany/EditCompany.tsx","Models/CouponModel.ts","Components/CouponArea/AddCoupon/AddCoupon.tsx","Components/CouponArea/AllAvailableCoupons/AllAvailableCoupons.tsx","Components/CouponArea/CouponDetails/CouponDetails.tsx","Components/CouponArea/CouponsListForCompany/CouponsListForCompany.tsx","Components/CouponArea/CouponsListForCustomer/CouponsListForCustomer.tsx","Components/CouponArea/DeleteCoupon/DeleteCoupon.tsx","Components/CouponArea/EditCoupon/EditCoupon.tsx","Components/CouponArea/PurchaseCoupon/PurchaseCoupon.tsx","Components/CustomerArea/AddCustomer/AddCustomer.tsx","Components/CustomerArea/CustomerDetails/CustomerDetails.tsx","Components/CustomerArea/CustomersList/CustomersList.tsx","Components/CustomerArea/DeleteCustomer/DeleteCustomer.tsx","Components/CustomerArea/EditCustomer/EditCustomer.tsx","Components/HomeArea/Home/Home.tsx","Assets/Images/Status/page_404.png","Components/SharedArea/Page404/Page404.tsx","Components/LayoutArea/About/About.tsx","Components/LayoutArea/ContactUs/ContactUs.tsx","Components/LayoutArea/Routing/Routing.tsx","Components/LayoutArea/Layout/Layout.tsx","reportWebVitals.ts","index.tsx"],"names":["ClientType","AuthActionType","AuthAppState","user","storedUser","JSON","parse","localStorage","getItem","this","loginAction","type","Login","payload","CompaniesActionType","CompaniesAppState","companies","companyAddedAction","company","CompanyAdded","companyUpdatedAction","CompanyUpdated","companyDeletedAction","id","CompanyDeleted","CompanyActionType","CompanyAppState","companyDownloadedAction","CompanyDownloaded","companyCouponAddedAction","coupon","CompanyCouponAdded","companyCouponUpdatedAction","CompanyCouponUpdated","companyCouponDeletedAction","CompanyCouponDeleted","CouponsActionType","CouponsAppState","coupons","couponsDownloadedAction","CouponsDownloaded","CustomerActionType","CustomerAppState","customer","customerDownloadedAction","CustomerDownloaded","CustomersActionType","CustomersAppState","customers","customerAddedAction","CustomerAdded","customerUpdatedAction","CustomerUpdated","customerDeletedAction","CustomerDeleted","reducers","combineReducers","companiesAppState","currentState","action","newState","CompaniesDownloaded","push","updatedCompany","index","findIndex","splice","customersAppState","CustomersDownloaded","updatedCustomer","authAppState","setItem","stringify","Logout","removeItem","couponsAppState","companyAppState","updatedCoupon","e","customerAppState","CustomerMadePurchase","store","createStore","AdminMenu","className","Typography","variant","to","exact","CompanyMenu","props","state","getState","setState","Component","CustomerMenu","Footer","AuthMenu","unsubscribeMe","currentUser","subscribe","clientType","name","Header","Logo","src","couponLogo","alt","MainMenu","GlobalConfigs","globalConfigs","urls","admin","login","notify","notification","Notyf","duration","position","x","y","ripple","message","success","error","err","extractMessage","response","data","Array","isArray","useForm","register","handleSubmit","errors","formState","useState","setType","history","useHistory","credentials","a","axios","post","dispatch","onSubmit","FormControl","TextField","required","value","minLength","label","placeholder","email","helperText","maxLength","password","InputLabel","Select","onChange","event","target","MenuItem","ADMINISTRATOR","COMPANY","CUSTOMER","FormHelperText","Button","color","useEffect","jwtAxios","create","interceptors","request","use","headers","token","AddCompany","addedCompany","CompaniesList","length","get","map","title","RemoveRedEyeOutlined","pathname","Edit","DeleteForever","startIcon","AddBox","ArrowBack","CouponCard","Card","CardHeader","subheader","Date","toLocaleDateString","CardMedia","component","image","imageNotAvailable","CardContent","paragraph","startDate","endDate","amount","price","CardActions","style","fontSize","Shop","CompanyDetails","currId","match","params","find","c","onClick","goBack","DeleteCompany","delete","deletedCompany","i","currCoupons","j","k","EditCompany","Category","location","useLocation","selectedCompany","put","AddCoupon","currCompanyId","category","setCategory","companyId","imageFile","item","addedCoupon","shrink","TextareaAutosize","minRows","maxRows","description","min","max","InputLabelProps","displayEmpty","selected","disabled","CLOTHING","EDUCATION","ELECTRICITY","HEALTHY","RESTAURANT","SPORT","VACATION","accept","AllAvailableCoupons","CouponDetails","customerResponse","foundCoupon","couponsResponse","CouponsListForCompany","CouponsListForCustomer","DeleteCoupon","deletedCoupon","EditCoupon","selectedCoupon","updateCoupon","toString","InputProps","PurchaseCoupon","couponId","customerId","couponToPurchase","resp","purchasedCoupon","AddCustomer","addedCustomer","firstName","lastName","CustomerDetails","CustomersList","DeleteCustomer","deletedCustomer","EditCustomer","selectedCustomer","Home","Page404","PageNotFoundImage","About","ContactUs","Email","Phone","Print","Facebook","Twitter","Instagram","Routing","path","from","Layout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34c8fcb1.chunk.js","sourcesContent":["export default class CredentialsModel {\r\n    public email: string;\r\n    public password: string;\r\n    public clientType: ClientType;\r\n}\r\n\r\nexport enum ClientType {\r\n    ADMINISTRATOR = \"ADMINISTRATOR\",\r\n    COMPANY = \"COMPANY\",\r\n    CUSTOMER = \"CUSTOMER\"\r\n}","import UserModel from \"../Models/UserModel\";\r\n\r\n// App State\r\nexport class AuthAppState {\r\n    public user: UserModel = null;\r\n    public constructor() {\r\n        const storedUser: UserModel = JSON.parse(localStorage.getItem(\"coupon-system-user\"));\r\n        if (storedUser) {\r\n            this.user = storedUser;\r\n        }\r\n    }\r\n}\r\n\r\n// Action Types\r\nexport enum AuthActionType {\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\n// Action\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Action Creators\r\nexport function loginAction(user: UserModel): AuthAction {\r\n    return { type: AuthActionType.Login, payload: user };\r\n}\r\nexport function logoutAction(): AuthAction {\r\n    return { type: AuthActionType.Logout };\r\n}\r\n\r\n// Reducers\r\nexport function authReducer(currentState: AuthAppState = new AuthAppState(), action: AuthAction): AuthAppState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case AuthActionType.Login:\r\n            newState.user = action.payload;\r\n            localStorage.setItem(\"coupon-system-user\", JSON.stringify(newState.user));\r\n            break;\r\n        case AuthActionType.Logout:\r\n            newState.user = null;\r\n            localStorage.removeItem(\"coupon-system-user\");\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import CompanyModel from \"../Models/CompanyModel\";\r\n\r\n// AppState\r\nexport class CompaniesAppState {\r\n    public companies: CompanyModel[] = [];\r\n}\r\n\r\n// Action Types\r\nexport enum CompaniesActionType {\r\n    CompaniesDownloaded = \"CompaniesDownloaded\",\r\n    CompanyAdded = \"CompanyAdded\",\r\n    CompanyUpdated = \"CompanyUpdated\",\r\n    CompanyDeleted = \"CompanyDeleted\"\r\n}\r\n\r\n// Action\r\nexport interface CompanyAction {\r\n    type: CompaniesActionType;\r\n    payload: any;\r\n}\r\n\r\n// Action Creators\r\nexport function companiesDownloadedAction(companies: CompanyModel[]): CompanyAction {\r\n    return { type: CompaniesActionType.CompaniesDownloaded, payload: companies };\r\n}\r\nexport function companyAddedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyAdded, payload: company };\r\n}\r\nexport function companyUpdatedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyUpdated, payload: company };\r\n}\r\nexport function companyDeletedAction(id: number): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyDeleted, payload: id };\r\n}\r\n\r\n// Reducer\r\nexport function companiesReducer(currentState: CompaniesAppState = new CompaniesAppState(), action: CompanyAction): CompaniesAppState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CompaniesActionType.CompaniesDownloaded:\r\n            newState.companies = action.payload;\r\n            break;\r\n        case CompaniesActionType.CompanyAdded:\r\n            newState.companies.push(action.payload);\r\n            break;\r\n        case CompaniesActionType.CompanyUpdated:\r\n            const updatedCompany: CompanyModel = action.payload;\r\n            const index = newState.companies.findIndex(company => company.id === updatedCompany.id);\r\n            newState.companies[index] = { ...updatedCompany };\r\n            break;\r\n        case CompaniesActionType.CompanyDeleted:\r\n            newState.companies.splice(newState.companies.findIndex(company => company.id === action.payload), 1);\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import CompanyModel from \"../Models/CompanyModel\";\r\nimport CouponModel from \"../Models/CouponModel\";\r\n\r\nexport class CompanyAppState {\r\n    company: CompanyModel = null;\r\n}\r\n\r\nexport enum CompanyActionType {\r\n    CompanyDownloaded = \"CompanyDownloaded\",\r\n    CompanyCouponAdded = \"CompanyCouponAdded\",\r\n    CompanyCouponUpdated = \"CompanyCouponUpdated\",\r\n    CompanyCouponDeleted = \"CompanyCouponDeleted\"\r\n}\r\n\r\nexport interface CompanyAction {\r\n    type: CompanyActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function companyDownloadedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompanyActionType.CompanyDownloaded, payload: company };\r\n}\r\nexport function companyCouponAddedAction(coupon: CouponModel): CompanyAction {\r\n    return { type: CompanyActionType.CompanyCouponAdded, payload: coupon };\r\n}\r\nexport function companyCouponUpdatedAction(coupon: CouponModel): CompanyAction {\r\n    return { type: CompanyActionType.CompanyCouponUpdated, payload: coupon };\r\n}\r\nexport function companyCouponDeletedAction(id: number): CompanyAction {\r\n    return { type: CompanyActionType.CompanyCouponDeleted, payload: id };\r\n}\r\n\r\nexport function companyReducer(currentState: CompanyAppState = new CompanyAppState(), action: CompanyAction): CompanyAppState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CompanyActionType.CompanyDownloaded:\r\n            newState.company = action.payload;\r\n            break;\r\n        case CompanyActionType.CompanyCouponAdded:\r\n            newState.company.coupons.push(action.payload);\r\n            break;\r\n        case CompanyActionType.CompanyCouponUpdated:\r\n            const updatedCoupon: CouponModel = action.payload;\r\n            const index: number = newState.company.coupons.findIndex(e => e.id === updatedCoupon.id);\r\n            newState.company.coupons[index] = { ...updatedCoupon };\r\n            break;\r\n        case CompanyActionType.CompanyCouponDeleted:\r\n            newState.company.coupons.splice(newState.company.coupons.findIndex(e => e.id === action.payload), 1);\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}\r\n","import CouponModel from \"../Models/CouponModel\";\r\n\r\n// AppState\r\nexport class CouponsAppState {\r\n    public coupons: CouponModel[] = [];\r\n}\r\n\r\n// Action Types\r\nexport enum CouponsActionType {\r\n    CouponsDownloaded = \"CouponsDownloaded\",\r\n    CouponAdded = \"CouponAdded\",\r\n    CouponUpdated = \"CouponUpdated\",\r\n    CouponDeleted = \"CouponDeleted\"\r\n}\r\n\r\n// Action\r\nexport interface CouponAction {\r\n    type: CouponsActionType;\r\n    payload: any;\r\n}\r\n\r\n// Action Creators\r\nexport function couponsDownloadedAction(coupons: CouponModel[]): CouponAction {\r\n    return { type: CouponsActionType.CouponsDownloaded, payload: coupons };\r\n}\r\n\r\n// Reducers\r\nexport function couponsReducer(currentState: CouponsAppState = new CouponsAppState(), action: CouponAction): CouponsAppState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CouponsActionType.CouponsDownloaded:\r\n            newState.coupons = action.payload;\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import CouponModel from \"../Models/CouponModel\";\r\nimport CustomerModel from \"../Models/CustomerModel\";\r\n\r\nexport class CustomerAppState {\r\n    customer: CustomerModel = null;\r\n}\r\n\r\nexport enum CustomerActionType {\r\n    CustomerDownloaded = \"CustomerDownloaded\",\r\n    CustomerMadePurchase = \"CustomerMadePurchase\"\r\n}\r\n\r\nexport interface CustomerAction {\r\n    type: CustomerActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function customerDownloadedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomerActionType.CustomerDownloaded, payload: customer };\r\n}\r\nexport function customerMadePurchaseAction(coupon: CouponModel): CustomerAction {\r\n    return { type: CustomerActionType.CustomerMadePurchase, payload: coupon };\r\n}\r\n\r\nexport function customerReducer(currentState: CustomerAppState = new CustomerAppState(), action: CustomerAction): CustomerAppState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CustomerActionType.CustomerDownloaded:\r\n            newState.customer = action.payload;\r\n            break;\r\n        case CustomerActionType.CustomerMadePurchase:\r\n            newState.customer.coupons.push(action.payload);\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}\r\n","import CustomerModel from \"../Models/CustomerModel\";\r\n\r\n// AppState\r\nexport class CustomersAppState {\r\n    public customers: CustomerModel[] = [];\r\n}\r\n\r\n// Action Types\r\nexport enum CustomersActionType {\r\n    CustomersDownloaded = \"CustomersDownloaded\",\r\n    CustomerAdded = \"CustomerAdded\",\r\n    CustomerUpdated = \"CustomerUpdated\",\r\n    CustomerDeleted = \"CustomerDeleted\"\r\n}\r\n\r\n// Action\r\nexport interface CustomerAction {\r\n    type: CustomersActionType;\r\n    payload: any;\r\n}\r\n\r\n// Action Creators\r\nexport function customersDownloadedAction(customers: CustomerModel[]): CustomerAction {\r\n    return { type: CustomersActionType.CustomersDownloaded, payload: customers };\r\n}\r\nexport function customerAddedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomersActionType.CustomerAdded, payload: customer };\r\n}\r\nexport function customerUpdatedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomersActionType.CustomerUpdated, payload: customer };\r\n}\r\nexport function customerDeletedAction(id: number): CustomerAction {\r\n    return { type: CustomersActionType.CustomerDeleted, payload: id };\r\n}\r\n\r\n// Reducer\r\nexport function customersReducer(currentState: CustomersAppState = new CustomersAppState(), action: CustomerAction): CustomersAppState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case CustomersActionType.CustomersDownloaded:\r\n            newState.customers = action.payload;\r\n            break;\r\n        case CustomersActionType.CustomerAdded:\r\n            newState.customers.push(action.payload);\r\n            break;\r\n        case CustomersActionType.CustomerUpdated:\r\n            const updatedCustomer: CustomerModel = action.payload;\r\n            const index = newState.customers.findIndex(customer => customer.id === updatedCustomer.id);\r\n            newState.customers[index] = { ...updatedCustomer };\r\n            break;\r\n        case CustomersActionType.CustomerDeleted:\r\n            newState.customers.splice(newState.customers.findIndex(customer => customer.id === action.payload, 1));\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import { combineReducers, createStore } from \"redux\";\r\nimport { authReducer } from \"./AuthAppState\";\r\nimport { companiesReducer } from \"./CompaniesAppState\";\r\nimport { companyReducer } from \"./CompanyAppState\";\r\nimport { couponsReducer } from \"./CouponsAppState\";\r\nimport { customerReducer } from \"./CustomerAppState\";\r\nimport { customersReducer } from \"./CustomersAppState\";\r\n\r\nconst reducers = combineReducers({\r\n    companiesAppState: companiesReducer,\r\n    customersAppState: customersReducer,\r\n    authAppState: authReducer,\r\n    couponsAppState: couponsReducer,\r\n    companyAppState: companyReducer,\r\n    customerAppState: customerReducer\r\n});\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import { Typography } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./AdminMenu.css\";\n\nfunction AdminMenu(): JSX.Element {\n    return (\n        <div className=\"AdminMenu\">\n\n            <Typography variant=\"h4\">Menu</Typography>\n\n            <nav>\n                <NavLink to=\"/home\" exact>Home</NavLink>\n                <br />\n                <NavLink to=\"/admin/get/company/all\" exact>Companies</NavLink>\n                <NavLink to=\"/admin/get/customer/all\" exact>Customers</NavLink>\n                <br />\n                <NavLink to=\"/admin/add/company\" exact>Add Company</NavLink>\n                <NavLink to=\"/admin/add/customer\" exact>Add Customer</NavLink>\n            </nav>\n        </div>\n    );\n}\n\nexport default AdminMenu;\n","import { Typography } from \"@material-ui/core\";\nimport { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport store from \"../../../Redux/Store\";\nimport \"./CompanyMenu.css\";\n\ninterface CompanyMenuState {\n    id: number;\n}\n\nclass CompanyMenu extends Component<{}, CompanyMenuState> {\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = { id: store.getState().authAppState.user.id };\n    }\n\n    public componentDidMount(): void {\n        this.setState({ id: store.getState().authAppState.user?.id });\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CompanyMenu\">\n                <Typography variant=\"h4\">Menu</Typography>\n\n                <nav>\n                    <NavLink to=\"/home\" exact>Home</NavLink>\n                    <br />\n                    <NavLink to={\"/company/\" + this.state.id + \"/get/coupon/all\"} exact>My Coupons</NavLink>\n                    <br />\n                    <NavLink to={\"/company/\" + this.state.id + \"/add/coupon\"} exact>Add Coupon</NavLink>\n                    <br />\n                    <NavLink to={\"/company/\" + this.state.id + \"/get/details\"} exact>My Details</NavLink>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default CompanyMenu;\n","import { Typography } from \"@material-ui/core\";\nimport { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport store from \"../../../Redux/Store\";\nimport \"./CustomerMenu.css\";\n\ninterface CustomerMenuState {\n    id: number;\n}\n\nclass CustomerMenu extends Component<{}, CustomerMenuState> {\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = { id: store.getState().authAppState.user?.id };\n    }\n\n    public componentDidMount(): void {\n        this.setState({ id: store.getState().authAppState.user?.id });\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CustomerMenu\">\n                <Typography variant=\"h4\">Menu</Typography>\n\n                <nav>\n                    <NavLink to=\"/home\" exact>Home</NavLink>\n                    <br />\n                    <NavLink to={\"/customer/\" + this.state.id + \"/get/coupon/all\"} exact>My Coupons</NavLink>\n                    <br />\n                    <NavLink to=\"/customer/get/coupon/all\" exact>Coupons Shop</NavLink>\n                    <br />\n                    <NavLink to={\"/customer/\" + this.state.id + \"/get/details\"} exact>My Details</NavLink>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default CustomerMenu;\n","import \"./Footer.css\";\n\nfunction Footer(): JSX.Element {\n    return (\n        <div className=\"Footer\">\n            <span>All Rights Reserved &copy; Vitaly Zlobin</span>\n        </div>\n    );\n}\n\nexport default Footer;\n","import { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Unsubscribe } from \"redux\";\nimport UserModel from \"../../../Models/UserModel\";\nimport store from \"../../../Redux/Store\";\nimport \"./AuthMenu.css\";\n\ninterface AuthMenuState {\n    currentUser: UserModel;\n}\n\nclass AuthMenu extends Component<{}, AuthMenuState> {\n\n    private unsubscribeMe: Unsubscribe;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = { currentUser: store.getState().authAppState.user };\n    }\n\n    public componentDidMount(): void {\n        this.unsubscribeMe = store.subscribe(() => {\n            this.setState({ currentUser: store.getState().authAppState.user });\n        });\n    }\n\n    public componentWillUnmount(): void {\n        this.unsubscribeMe();\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"AuthMenu\">\n                {\n                    // Greet Guest\n                    this.state.currentUser === null &&\n                    <>\n                        Hello <span>Guest</span>|<NavLink to=\"/login\">Login</NavLink>\n                    </>\n                }\n                {\n                    // Greet Admin / Company / Customer\n                    this.state.currentUser?.clientType &&\n                    <>\n                        Hello <span>{this.state.currentUser.name}</span>|\n                        <NavLink to=\"/logout\">Logout</NavLink>\n                    </>\n                }\n            </div>\n        );\n    }\n}\n\nexport default AuthMenu;\n","import AuthMenu from \"../../AuthArea/AuthMenu/AuthMenu\";\nimport \"./Header.css\";\n\nfunction Header(): JSX.Element {\n    return (\n        <div className=\"Header\">\n            <h1>Coupon System Website</h1>\n            <AuthMenu />\n        </div>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/coupon_logo.b0f7531d.png\";","import couponLogo from \"../../../Assets/Images/Logos/coupon_logo.png\";\nimport \"./Logo.css\";\n\nfunction Logo(): JSX.Element {\n    return (\n        <div className=\"Logo\">\n            <img src={couponLogo} alt=\"Main Coupon Logo\" />\n        </div>\n    );\n}\n\nexport default Logo;\n","import { Typography } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./MainMenu.css\";\n\nfunction MainMenu(): JSX.Element {\n    return (\n        <div className=\"MainMenu\">\n            <Typography variant=\"h4\">Menu</Typography>\n\n            <nav>\n                <NavLink to=\"/home\" exact>Home</NavLink>\n                <br />\n                <NavLink to=\"/about\" exact>About</NavLink>\n                <br />\n                <NavLink to=\"/contact-us\" exact>Contact Us</NavLink>\n            </nav>\n        </div>\n    );\n}\n\nexport default MainMenu;\n","class GlobalConfigs {\r\n}\r\n\r\nclass GlobalConfigsDevelopment extends GlobalConfigs {\r\n\r\n    public urls = {\r\n        admin: \"http://localhost:8080/api/admin/\",\r\n        company: \"http://localhost:8080/api/company/\",\r\n        customer: \"http://localhost:8080/api/customer/\",\r\n        login: \"http://localhost:8080/api/login\"\r\n    };\r\n}\r\n\r\nclass GlobalConfigsProduction extends GlobalConfigs {\r\n\r\n    public urls = {\r\n        admin: \"http://localhost:8080/api/admin/\",\r\n        company: \"http://localhost:8080/api/company/\",\r\n        customer: \"http://localhost:8080/api/customer/\",\r\n        login: \"http://localhost:8080/api/login\"\r\n    };\r\n}\r\n\r\nconst globalConfigs = process.env.NODE_ENV === \"development\" ? new GlobalConfigsDevelopment() : new GlobalConfigsProduction();\r\n\r\nexport default globalConfigs;","import { Notyf } from \"notyf\";\r\n\r\nclass Notify {\r\n\r\n    private notification = new Notyf({ duration: 5000, position: { x: \"center\", y: \"top\" }, ripple: true });\r\n\r\n    public success(message: string) {\r\n        this.notification.success(\"SUCCESS:<br />\" + message);\r\n    }\r\n\r\n    public errorCustomMessage(message: string) {\r\n        this.notification.error(\"ERROR:<br />\" + message);\r\n    }\r\n\r\n    public error(err: any) {\r\n        const message = this.extractMessage(err);\r\n        this.notification.error(\"ERROR:<br />\" + message);\r\n    }\r\n\r\n    private extractMessage(err: any): string {\r\n        if (typeof err === \"string\") {\r\n            return err;\r\n        }\r\n\r\n        if (typeof err?.response?.data?.message === \"string\") { // Backend exact error\r\n            return err.response.data.message;\r\n        }\r\n\r\n        if (typeof err?.response?.data === \"string\") { // Backend exact error\r\n            return err.response.data;\r\n        }\r\n\r\n        if (Array.isArray(err?.response?.data)) { // Backend exact errors\r\n            return err.response.data[0];\r\n        }\r\n\r\n        // Must be last: \r\n        if (typeof err?.message === \"string\") {\r\n            return err.message;\r\n        }\r\n\r\n        return \"Some error occurred, please try again.\";\r\n    }\r\n\r\n}\r\n\r\nconst notify = new Notify();\r\n\r\nexport default notify;","import { Button, FormControl, FormHelperText, InputLabel, MenuItem, Select, TextField, Typography } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport CredentialsModel, { ClientType } from \"../../../Models/CredentialsModel\";\nimport UserModel from \"../../../Models/UserModel\";\nimport { loginAction } from \"../../../Redux/AuthAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./Login.css\";\n\nfunction Login(): JSX.Element {\n    const { register, handleSubmit, formState: { errors } } = useForm<CredentialsModel>();\n    const [clientType, setType] = useState<ClientType>(\"\" as unknown as ClientType);\n    const history = useHistory();\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setType(event.target.value as ClientType);\n    };\n\n    async function onSubmit(credentials: CredentialsModel) {\n        try {\n            const response = await axios.post<UserModel>(globalConfigs.urls.login, credentials);\n            store.dispatch(loginAction(response.data));\n            notify.success(\"You are logged in now!\");\n            history.push(\"/home\");\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    return (\n        <div className=\"Login\">\n\n            <Typography variant=\"h3\">Login</Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n\n                <FormControl>\n                    <TextField {...register(\"email\", {\n                        required: { value: true, message: \"Missing email\" },\n                        minLength: { value: 5, message: \"Email is too short\" }\n                    })}\n                        label=\"Email\"\n                        type=\"email\"\n                        placeholder=\"Enter email\"\n                        required\n                        error={!!errors.email}\n                        helperText={errors.email?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"password\", {\n                        required: { value: true, message: \"Missing password\" },\n                        minLength: { value: 4, message: \"Password must be al least 4 characters\" },\n                        maxLength: { value: 20, message: \"Password must be at most 20 characters\" }\n                    })}\n                        label=\"Password\"\n                        type=\"password\"\n                        placeholder=\"Enter Password\"\n                        required\n                        error={!!errors.password}\n                        helperText={errors.password?.message}\n                    />\n                </FormControl>\n\n                <br />\n\n                <FormControl>\n                    <InputLabel required>Client Type</InputLabel>\n                    <Select {...register(\"clientType\", { required: true })}\n                        value={clientType}\n                        error={!!errors.clientType}\n                        onChange={handleChange}\n                    >\n                        <MenuItem value={ClientType.ADMINISTRATOR}>Administrator</MenuItem>\n                        <MenuItem value={ClientType.COMPANY}>Company</MenuItem>\n                        <MenuItem value={ClientType.CUSTOMER}>Customer</MenuItem>\n                    </Select>\n                    <FormHelperText>Select Client Type</FormHelperText>\n                </FormControl>\n\n                <br /><br />\n                <div>\n                    <Button type=\"submit\" color=\"primary\" variant=\"contained\">Login</Button>\n                    <NavLink to=\"/home\" exact>\n                        <Button color=\"secondary\" variant=\"contained\">Cancel</Button>\n                    </NavLink>\n                </div>\n\n            </form>\n        </div>\n    );\n}\n\nexport default Login;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { logoutAction } from \"../../../Redux/AuthAppState\";\nimport store from \"../../../Redux/Store\";\nimport notify from \"../../../Services/Notifications\";\n\nfunction Logout(): JSX.Element {\n    const history = useHistory();\n\n    useEffect(() => {\n        store.dispatch(logoutAction());\n        store.getState().companyAppState.company = null;\n        store.getState().customerAppState.customer = null;\n        store.getState().companiesAppState.companies = [];\n        store.getState().customersAppState.customers = [];\n        store.getState().couponsAppState.coupons = [];\n        store.getState().authAppState.user = null;\n        notify.success(\"You are now logged out.\");\n        history.push(\"/home\");\n    });\n\n    return <></>;\n}\n\nexport default Logout;\n","import axios from \"axios\";\r\nimport UserModel from \"../Models/UserModel\";\r\n\r\nconst jwtAxios = axios.create();\r\n\r\njwtAxios.interceptors.request.use(request => {\r\n    request.headers = {\r\n        \"authorization\": \"Bearer \" + (JSON.parse(localStorage.getItem(\"coupon-system-user\")) as UserModel).token\r\n    };\r\n    return request;\r\n});\r\n\r\nexport default jwtAxios;","import { Button, FormControl, TextField, Typography } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport { companyAddedAction } from \"../../../Redux/CompaniesAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./AddCompany.css\";\n\nfunction AddCompany(): JSX.Element {\n\n    const { register, handleSubmit, formState: { errors } } = useForm<CompanyModel>();\n    const history = useHistory();\n\n    async function onSubmit(company: CompanyModel) {\n        try {\n            const response = await jwtAxios.post<CompanyModel>(globalConfigs.urls.admin + \"add/company\", company);\n            const addedCompany = response.data;\n            store.dispatch(companyAddedAction(addedCompany));\n            history.push(\"/admin/get/company/all\");\n            notify.success(\"Company [\" + addedCompany.id + \":\" + addedCompany.name + \"] added\");\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    return (\n        <div className=\"AddCompany\">\n            <Typography variant=\"h4\">Add Company</Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <FormControl>\n                    <TextField {...register(\"name\", {\n                        required: { value: true, message: \"Missing name\" },\n                        minLength: { value: 2, message: \"Name must be at least 2 characters\" },\n                        maxLength: { value: 30, message: \"Name must be at most 30 characters\" }\n                    })}\n                        label=\"Name\"\n                        type=\"text\"\n                        placeholder=\"Enter name\"\n                        required\n                        error={!!errors.name}\n                        helperText={errors.name?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"email\", {\n                        required: { value: true, message: \"Missing email\" }\n                    })}\n                        label=\"Email\"\n                        type=\"email\"\n                        placeholder=\"Enter email\"\n                        required\n                        error={!!errors.email}\n                        helperText={errors.email?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"password\", {\n                        required: { value: true, message: \"Password missing\" },\n                        minLength: { value: 4, message: \"Password must be at least 4 characters\" },\n                        maxLength: { value: 30, message: \"Password must at most 30 characters\" }\n                    })}\n                        label=\"Password\"\n                        type=\"password\"\n                        placeholder=\"Enter password\"\n                        required\n                        error={!!errors.password}\n                        helperText={errors.password?.message}\n                    />\n                </FormControl>\n\n                <br /><br />\n                <div>\n                    <Button type=\"submit\" color=\"primary\" variant=\"contained\">Add</Button>\n                    <NavLink to=\"/admin/get/company/all\" exact>\n                        <Button color=\"secondary\" variant=\"contained\">Cancel</Button>\n                    </NavLink>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default AddCompany;\n","import { Button, Typography } from \"@material-ui/core\";\r\nimport { AddBox, ArrowBack, DeleteForever, Edit, RemoveRedEyeOutlined } from \"@material-ui/icons\";\r\nimport { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport CompanyModel from \"../../../Models/CompanyModel\";\r\nimport { companiesDownloadedAction } from \"../../../Redux/CompaniesAppState\";\r\nimport store from \"../../../Redux/Store\";\r\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\r\nimport jwtAxios from \"../../../Services/jwtAxios\";\r\nimport notify from \"../../../Services/Notifications\";\r\nimport \"./CompaniesList.css\";\r\n\r\ninterface CompaniesListState {\r\n    companies: CompanyModel[];\r\n}\r\n\r\nclass CompaniesList extends Component<{}, CompaniesListState> {\r\n\r\n    public constructor(props: {}) {\r\n        super(props);\r\n        this.state = { companies: store.getState().companiesAppState.companies };\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            if (store.getState().companiesAppState.companies.length === 0) {\r\n                const response = await jwtAxios.get<CompanyModel[]>(globalConfigs.urls.admin + \"get/company/all\");\r\n                this.setState({ companies: response.data });\r\n                store.dispatch(companiesDownloadedAction(response.data));\r\n            }\r\n        } catch (err) {\r\n            notify.error(err);\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"CompaniesList\">\r\n\r\n                <table>\r\n                    <caption>\r\n                        <Typography variant=\"h3\">Companies List ({this.state.companies.length})</Typography>\r\n                    </caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Password</th>\r\n                            <th>Coupons</th>\r\n                            <th>Details</th>\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.companies.map(company =>\r\n                                <tr key={company.id} className=\"TableBodyRow\">\r\n                                    <td>{company.id}</td>\r\n                                    <td>{company.name}</td>\r\n                                    <td>{company.email}</td>\r\n                                    <td>{company.password}</td>\r\n                                    <td>{company.coupons?.length}</td>\r\n                                    <td>{\r\n                                        <NavLink\r\n                                            to={\"/admin/get/company/\" + company.id}\r\n                                            title=\"View Company Details\" exact><RemoveRedEyeOutlined />\r\n                                        </NavLink>\r\n                                    }</td>\r\n                                    <td>{\r\n                                        <NavLink\r\n                                            to={{ pathname: \"/admin/update/company\", state: company.id }}\r\n                                            title=\"Edit Company\" exact><Edit />\r\n                                        </NavLink>\r\n                                    }</td>\r\n                                    <td>{\r\n                                        <NavLink\r\n                                            to={\"/admin/delete/company/\" + company.id}\r\n                                            title=\"Delete Company\" exact><DeleteForever />\r\n                                        </NavLink>\r\n                                    }</td>\r\n                                </tr>)\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n\r\n\r\n                <br />\r\n                <NavLink to=\"/admin/add/company\" exact>\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<AddBox />}>Add Company</Button>\r\n                </NavLink>\r\n\r\n                <NavLink to=\"/home\" exact>\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<ArrowBack />}>Home</Button>\r\n                </NavLink>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompaniesList;","export default __webpack_public_path__ + \"static/media/no_image_available.c557c753.png\";","import { Card, CardActions, CardContent, CardHeader, CardMedia, Typography } from \"@material-ui/core\";\nimport { DeleteForever, Edit, RemoveRedEyeOutlined, Shop } from \"@material-ui/icons\";\nimport { NavLink } from \"react-router-dom\";\nimport imageNotAvailable from \"../../../Assets/Images/Status/no_image_available.png\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { ClientType } from \"../../../Models/CredentialsModel\";\nimport store from \"../../../Redux/Store\";\nimport \"./CouponCard.css\";\n\ninterface CouponCardProps {\n    coupon: CouponModel;\n}\n\nfunction CouponCard(props: CouponCardProps): JSX.Element {\n    return (\n        <div className=\"CouponCard\">\n            <Card>\n                <CardHeader\n                    title={props.coupon.title}\n                    subheader={new Date().toLocaleDateString()}\n                />\n                <CardMedia\n                    component=\"img\"\n                    // image={props.coupon.image}\n                    image={imageNotAvailable}\n                    title={props.coupon.title}\n                    alt={props.coupon.image}\n                />\n                <CardContent>\n                    <Typography paragraph color=\"secondary\"><b>Start Date:</b> <i>{props.coupon.startDate}</i></Typography>\n                    <Typography paragraph color=\"secondary\"><b>End Date:</b> <i>{props.coupon.endDate}</i></Typography>\n                    <Typography paragraph color=\"secondary\">\n                        <b>Amount:</b> <i>{props.coupon.amount > 0 ? props.coupon.amount : \"Out of Stock\"}</i>\n                    </Typography>\n                    <Typography paragraph color=\"secondary\"><b>Price:</b> <i>$ {props.coupon.price}</i></Typography>\n                </CardContent>\n\n                {\n                    // show it only to company clients\n                    store.getState().authAppState.user.clientType === ClientType.COMPANY &&\n                    <>\n                        <CardActions>\n                            <NavLink\n                                to={{\n                                    pathname: \"/company/\" + store.getState().authAppState.user.id + \"/update/coupon\",\n                                    state: props.coupon.id\n                                }}\n                                title=\"Edit Coupon\" exact><Edit style={{ fontSize: 40 }}\n                                />\n                            </NavLink>\n                            <NavLink\n                                to={\"/company/get/coupon/\" + props.coupon.id}\n                                title=\"View Coupon\" exact><RemoveRedEyeOutlined style={{ fontSize: 40 }}\n                                />\n                            </NavLink>\n                            <NavLink\n                                to={\"/company/delete/coupon/\" + props.coupon.id}\n                                title=\"Delete Coupon\" exact><DeleteForever style={{ fontSize: 40 }}\n                                />\n                            </NavLink>\n                        </CardActions>\n                    </>\n                }\n\n                {\n                    // show it only to customer clients\n                    store.getState().authAppState.user.clientType === ClientType.CUSTOMER &&\n                    <>\n                        <CardActions>\n                            <NavLink\n                                to={\"/customer/get/coupon/\" + props.coupon.id}\n                                title=\"View Coupon\" exact><RemoveRedEyeOutlined style={{ fontSize: 40 }}\n                                />\n                            </NavLink>\n                            <NavLink\n                                to={{ pathname: \"/customer/\" + store.getState().authAppState.user.id + \"/purchase\", state: props.coupon.id }}\n                                title=\"Purchase Coupon\" exact><Shop style={{ fontSize: 40 }}\n                                />\n                            </NavLink>\n                        </CardActions>\n                    </>\n                }\n            </Card>\n        </div>\n    );\n}\n\nexport default CouponCard;\n","import { Button, Typography } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport CouponCard from \"../../CouponArea/CouponCard/CouponCard\";\nimport \"./CompanyDetails.css\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface CompanyDetailsState {\n    company: CompanyModel;\n}\n\ninterface CompanyDetailsProps extends RouteComponentProps<RouteParams> {\n\n}\n\nclass CompanyDetails extends Component<CompanyDetailsProps, CompanyDetailsState> {\n\n    private currId: number = +this.props.match.params.id;\n\n    public constructor(props: CompanyDetailsProps) {\n        super(props);\n        this.state = { company: store.getState().companiesAppState.companies.find(c => c.id === this.currId) };\n    }\n\n    public async componentDidMount() {\n        try {\n            if (store.getState().customersAppState.customers.length === 0) {\n                const response = await jwtAxios.get<CompanyModel>(globalConfigs.urls.admin + \"get/company?id=\" + this.currId);\n                this.setState({ company: response.data });\n            }\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CompanyDetails\">\n                <Typography variant=\"h3\" paragraph><i><b>\"{this.state.company?.name}\"</b></i> Details</Typography>\n\n                <Typography variant=\"h5\" paragraph><b>ID:</b> <i>{this.state.company?.id}</i></Typography>\n                <Typography variant=\"h5\" paragraph><b>Name:</b> <i>{this.state.company?.name}</i></Typography>\n                <Typography variant=\"h5\" paragraph><b>Email:</b> <i>{this.state.company?.email}</i></Typography>\n                <Typography variant=\"h5\" paragraph><b>Password:</b> <i>{this.state.company?.password}</i></Typography>\n\n                <Typography variant=\"h4\">Available Coupons ({this.state.company?.coupons.length}):</Typography>\n                <div>\n                    {\n                        this.state.company?.coupons.length === 0 &&\n                        <Typography variant=\"body1\" paragraph><br />\n                            <em> --- Coupons not posted yet --- </em>\n                        </Typography>\n                    }\n                    {\n                        this.state.company?.coupons.map(e => <CouponCard coupon={e} key={e.id} />)\n                    }\n                </div>\n\n                <Button\n                    onClick={this.props.history.goBack}\n                    variant=\"contained\" color=\"primary\" startIcon={<ArrowBack />}>\n                    Back\n                </Button>\n\n            </div>\n        );\n    }\n}\n\nexport default CompanyDetails;\n","import { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport { companyDeletedAction } from \"../../../Redux/CompaniesAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface DeleteCompanyProps extends RouteComponentProps<RouteParams> {\n\n}\n\nclass DeleteCompany extends Component<DeleteCompanyProps> {\n\n    public constructor(props: DeleteCompanyProps) {\n        super(props);\n    }\n\n    public async componentDidMount() {\n        try {\n            const id: number = +this.props.match.params.id;\n            const response = await jwtAxios.delete<CompanyModel>(globalConfigs.urls.admin + \"delete/company?id=\" + id);\n            const deletedCompany = response.data;\n            store.dispatch(companyDeletedAction(id));\n\n            const customers = store.getState().customersAppState.customers;\n            if (customers.length > 0) {\n                for (let i = 0; i < customers.length; i++) {\n                    const currCoupons = customers[i].coupons;\n                    for (let j = 0; j < currCoupons.length; j++) {\n                        for (let k = 0; k < deletedCompany.coupons.length; k++) {\n                            if (currCoupons[j].id === deletedCompany.coupons[k].id) {\n                                customers[i].coupons.splice(j, 1);\n                            }\n                        }\n                    }\n                }\n            }\n\n            notify.success(\"Company \" + deletedCompany.name + \" deleted.\");\n            this.props.history.push(\"/admin/get/company/all\");\n        } catch (err) {\n            notify.error(err);\n            this.props.history.goBack();\n        }\n    }\n\n    public render(): JSX.Element {\n        return null;\n    }\n\n}\n\nexport default DeleteCompany;\n","import { Button, FormControl, TextField, Typography } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { NavLink, useHistory, useLocation } from \"react-router-dom\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport { companyUpdatedAction } from \"../../../Redux/CompaniesAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./EditCompany.css\";\n\nfunction EditCompany(): JSX.Element {\n    const { register, handleSubmit, formState: { errors } } = useForm<CompanyModel>();\n    const history = useHistory();\n    const location = useLocation();\n    const selectedCompany: CompanyModel = store.getState().companiesAppState.companies.find(c => c.id === location.state);\n\n    async function onSubmit(company: CompanyModel) {\n        try {\n            company.id = selectedCompany.id;\n            const response = await jwtAxios.put<CompanyModel>(globalConfigs.urls.admin + \"update/company\", company);\n            const updatedCompany = response.data;\n            store.dispatch(companyUpdatedAction(updatedCompany));\n            notify.success(\"Company \" + selectedCompany.name + \" was updated!\");\n            history.push(\"/admin/get/company/all\");\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    return (\n        <div className=\"EditCompany\">\n            <Typography variant=\"h4\">Edit: \"{selectedCompany.name}\"</Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <FormControl>\n                    <TextField {...register(\"email\", {\n                        required: { value: true, message: \"Missing email\" }\n                    })}\n                        label=\"Email\"\n                        type=\"email\"\n                        placeholder={selectedCompany.email}\n                        error={!!errors.email}\n                        helperText={errors.email?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"password\", {\n                        required: { value: true, message: \"Password missing\" },\n                        minLength: { value: 4, message: \"Password must be at least 4 characters\" },\n                        maxLength: { value: 30, message: \"Password must at most 30 characters\" }\n                    })}\n                        label=\"Password\"\n                        type=\"password\"\n                        placeholder={selectedCompany.password}\n                        error={!!errors.password}\n                        helperText={errors.password?.message}\n                    />\n                </FormControl>\n\n                <br /><br />\n                <div>\n                    <Button type=\"submit\" color=\"primary\" variant=\"contained\">Update</Button>\n                    <NavLink to=\"/admin/get/company/all\" exact>\n                        <Button color=\"secondary\" variant=\"contained\">Cancel</Button>\n                    </NavLink>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default EditCompany;\n","\r\nexport default class CouponModel {\r\n    public id: number;\r\n    public companyId: number;\r\n    public category: Category;\r\n    public title: string;\r\n    public description: string;\r\n    public startDate: string;\r\n    public endDate: string;\r\n    public amount: number;\r\n    public price: number;\r\n    public image: string;\r\n    public imageFile: FileList;\r\n    public token: string;\r\n}\r\n\r\nexport enum Category {\r\n    SPORT = \"SPORT\",\r\n    ELECTRICITY = \"ELECTRICITY\",\r\n    RESTAURANT = \"RESTAURANT\",\r\n    VACATION = \"VACATION\",\r\n    HEALTHY = \"HEALTHY\",\r\n    CLOTHING = \"CLOTHING\",\r\n    EDUCATION = \"EDUCATION\"\r\n}","import { Button, FormControl, FormHelperText, InputLabel, MenuItem, Select, TextareaAutosize, TextField, Typography } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport CouponModel, { Category } from \"../../../Models/CouponModel\";\nimport { companyCouponAddedAction } from \"../../../Redux/CompanyAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./AddCoupon.css\";\n\nfunction AddCoupon(): JSX.Element {\n    const currCompanyId = store.getState().authAppState.user.id;\n    const { register, handleSubmit, formState: { errors } } = useForm<CouponModel>();\n    const [category, setCategory] = useState<Category>(\"\" as unknown as Category);\n    const history = useHistory();\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategory(event.target.value as Category);\n    };\n\n    async function onSubmit(coupon: CouponModel) {\n        try {\n            if (coupon.startDate > coupon.endDate) {\n                notify.error(\"Start date must be before expiration date!\")\n            } else {\n                coupon.companyId = currCompanyId;\n                coupon.image = coupon.imageFile.item(0).name;\n\n                // =======  - multipart from-data - ==========//\n                // const myFormData = new FormData();\n                // myFormData.append(\"companyId\", coupon.companyId.toString());\n                // myFormData.append(\"category\", coupon.category);\n                // myFormData.append(\"title\", coupon.title);\n                // myFormData.append(\"description\", coupon.description);\n                // myFormData.append(\"startDate\", coupon.startDate);\n                // myFormData.append(\"endDate\", coupon.endDate);\n                // myFormData.append(\"amount\", coupon.amount.toString());\n                // myFormData.append(\"price\", coupon.price.toString());\n                // myFormData.append(\"image\", coupon.image);\n                // myFormData.append(\"imageFile\", coupon.imageFile.item(0));\n                // =======  - multipart from-data - ==========//\n\n                const response = await jwtAxios.post<CouponModel>(globalConfigs.urls.company + currCompanyId + \"/add/coupon\", coupon);\n                const addedCoupon = response.data;\n                store.dispatch(companyCouponAddedAction(addedCoupon));\n                notify.success(\"Coupon \" + addedCoupon.title + \" added\");\n                history.goBack();\n            }\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    return (\n        <div className=\"AddCoupon\">\n            <Typography variant=\"h4\">Add Coupon</Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <FormControl>\n                    <TextField {...register(\"title\", {\n                        required: { value: true, message: \"Missing title\" }\n                    })}\n                        label=\"Title\"\n                        type=\"text\"\n                        placeholder=\"Enter title\"\n                        required\n                        error={!!errors.title}\n                        helperText={errors.title?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel required shrink>Description</InputLabel>\n                    <TextareaAutosize {...register(\"description\", {\n                        required: { value: true, message: \"Missing description\" },\n                        minLength: { value: 4, message: \"Description must be al least 4 characters\" },\n                        maxLength: { value: 200, message: \"Description must be at most 200 characters\" }\n                    })}\n                        minRows={3}\n                        maxRows={3}\n                        aria-label=\"maximum height\"\n                        placeholder=\"Enter description\"\n                        required\n                    />\n                    <span style={{ color: \"red\" }}>{errors.description?.message}</span>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"amount\", {\n                        required: { value: true, message: \"Missing amount\" },\n                        min: { value: 0, message: \"Amount must be more or equals to 0\" },\n                        max: { value: 10000, message: \"Amount must be less or equals to 10_000\" }\n                    })}\n                        label=\"Amount\"\n                        type=\"number\"\n                        placeholder=\"Enter amount\"\n                        required\n                        error={!!errors.amount}\n                        helperText={errors.amount?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"price\", {\n                        required: { value: true, message: \"Missing price\" },\n                        min: { value: 0, message: \"Price must be more ore equals to 0\" },\n                        max: { value: 1000000, message: \"Price must be less or equals to 1_000_000.00\" }\n                    })}\n                        label=\"Price\"\n                        type=\"decimal\"\n                        placeholder=\"Enter price\"\n                        required\n                        error={!!errors.price}\n                        helperText={errors.price?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"startDate\", {\n                        required: { value: true, message: \"Missing start date\" },\n                        min: { value: new Date().toLocaleDateString(), message: \"Start date must be from today only\" },\n                    })}\n                        label=\"Start Date\"\n                        type=\"date\"\n                        required\n                        InputLabelProps={{ shrink: true }}\n                        error={!!errors.startDate}\n                        helperText={errors.startDate?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"endDate\", {\n                        required: { value: true, message: \"Missing expiration date\" },\n                        min: { value: new Date().toLocaleDateString(), message: \"Expiration date must be from today only\" },\n                    })}\n                        label=\"Expiration Date\"\n                        type=\"date\"\n                        required\n                        InputLabelProps={{ shrink: true }}\n                        error={!!errors.endDate}\n                        helperText={errors.endDate?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel required shrink>Category</InputLabel>\n                    <Select {...register(\"category\", { required: true })}\n                        value={category}\n                        displayEmpty\n                        error={!!errors.category}\n                        onChange={handleChange}\n                    >\n                        <MenuItem selected disabled value=\"\">\n                            <em>Select Category</em>\n                        </MenuItem>\n                        <MenuItem value={Category.CLOTHING}>Clothing</MenuItem>\n                        <MenuItem value={Category.EDUCATION}>Education</MenuItem>\n                        <MenuItem value={Category.ELECTRICITY}>Electricity</MenuItem>\n                        <MenuItem value={Category.HEALTHY}>Healthy</MenuItem>\n                        <MenuItem value={Category.RESTAURANT}>Restaurant</MenuItem>\n                        <MenuItem value={Category.SPORT}>Sport</MenuItem>\n                        <MenuItem value={Category.VACATION}>Vacation</MenuItem>\n                    </Select>\n                    <FormHelperText>Select Coupon Category</FormHelperText>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel required shrink>Image</InputLabel><br />\n                    <input {...register(\"imageFile\", {\n                        required: { value: true, message: \"Missing image\" }\n                    })}\n                        type=\"file\"\n                        required\n                        accept=\"image/*\"\n                    />\n                    <span style={{ color: \"red\" }}>{errors.imageFile?.message}</span>\n                </FormControl>\n\n                <br /><br />\n                <div>\n                    <Button type=\"submit\" color=\"primary\" variant=\"contained\">Add</Button>\n                    <Button onClick={history.goBack} color=\"secondary\" variant=\"contained\" startIcon={<ArrowBack />}>Cancel</Button>\n                </div>\n\n            </form>\n        </div>\n    );\n}\n\nexport default AddCoupon;\n","import { Typography } from \"@material-ui/core\";\nimport { Component } from \"react\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { couponsDownloadedAction } from \"../../../Redux/CouponsAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport CouponCard from \"../CouponCard/CouponCard\";\nimport \"./AllAvailableCoupons.css\";\n\ninterface AllAvailableCouponsState {\n    coupons: CouponModel[];\n}\n\nclass AllAvailableCoupons extends Component<{}, AllAvailableCouponsState> {\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = { coupons: store.getState().couponsAppState.coupons };\n    }\n\n    public async componentDidMount() {\n        if (store.getState().couponsAppState.coupons.length === 0) {\n            const response = await jwtAxios.get<CouponModel[]>(globalConfigs.urls.customer + \"get/coupon/all\");\n            this.setState({ coupons: response.data });\n            store.dispatch(couponsDownloadedAction(response.data));\n        }\n    }\n\n    public render(): JSX.Element {\n\n        return (\n            <div className=\"AllAvailableCoupons\">\n                <Typography variant=\"h4\">All Available Coupons ({this.state.coupons.length})</Typography>\n                <div>\n                    {\n                        this.state.coupons?.length === 0 &&\n                        <Typography variant=\"body1\" paragraph>\n                            There are no coupons to display. Please add some first ;)\n                        </Typography>\n                    }\n                    {\n                        this.state.coupons?.map(e => <CouponCard coupon={e} key={e.id} />)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AllAvailableCoupons;\n","import { Button, Typography } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport imageNotAvailable from \"../../../Assets/Images/Status/no_image_available.png\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { ClientType } from \"../../../Models/CredentialsModel\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport UserModel from \"../../../Models/UserModel\";\nimport { companyDownloadedAction } from \"../../../Redux/CompanyAppState\";\nimport { couponsDownloadedAction } from \"../../../Redux/CouponsAppState\";\nimport { customerDownloadedAction } from \"../../../Redux/CustomerAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./CouponDetails.css\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface CouponDetailsProps extends RouteComponentProps<RouteParams> {\n\n}\n\ninterface CouponDetailsState {\n    coupon: CouponModel;\n}\n\nclass CouponDetails extends Component<CouponDetailsProps, CouponDetailsState> {\n\n    public constructor(props: CouponDetailsProps) {\n        super(props);\n        if (store.getState().authAppState.user.clientType === ClientType.COMPANY) {\n            this.state = { coupon: store.getState().companyAppState.company?.coupons.find(c => c.id === +this.props.match.params.id) };\n        } else if (store.getState().authAppState.user.clientType === ClientType.CUSTOMER) {\n            if (store.getState().couponsAppState.coupons?.length === 0) {\n                this.state = { coupon: store.getState().customerAppState.customer?.coupons.find(c => c.id === +this.props.match.params.id) };\n            } else {\n                this.state = { coupon: store.getState().couponsAppState.coupons.find(c => c.id === +this.props.match.params.id) };\n            }\n        }\n    }\n\n    public async componentDidMount() {\n        try {\n            const user: UserModel = JSON.parse(localStorage.getItem(\"coupon-system-user\"));\n            if (user.clientType === ClientType.COMPANY) {\n                if (store.getState().companyAppState.company === null) {\n                    const response = await jwtAxios.get<CompanyModel>(globalConfigs.urls.company + user.id + \"/get/details\");\n                    this.setState({ coupon: response.data.coupons.find(e => e.id === +this.props.match.params.id) });\n                    store.dispatch(companyDownloadedAction(response.data));\n                }\n            } else if (user.clientType === ClientType.CUSTOMER) {\n                if (store.getState().couponsAppState.coupons.length === 0) {\n                    if (store.getState().customerAppState.customer === null) {\n                        const customerResponse = await jwtAxios.get<CustomerModel>(globalConfigs.urls.customer + user.id + \"/get/details\");\n                        const foundCoupon = customerResponse.data.coupons.find(e => e.id === +this.props.match.params.id);\n                        this.setState({ coupon: foundCoupon });\n                        store.dispatch(customerDownloadedAction(customerResponse.data));\n                        if (!foundCoupon) {\n                            const couponsResponse = await jwtAxios.get<CouponModel[]>(globalConfigs.urls.customer + \"get/coupon/all\");\n                            this.setState({ coupon: couponsResponse.data.find(e => e.id === +this.props.match.params.id) });\n                            store.dispatch(couponsDownloadedAction(couponsResponse.data));\n                        }\n                    } else {\n                        const couponsResponse = await jwtAxios.get<CouponModel[]>(globalConfigs.urls.customer + \"get/coupon/all\");\n                        this.setState({ coupon: couponsResponse.data.find(e => e.id === +this.props.match.params.id) });\n                        store.dispatch(couponsDownloadedAction(couponsResponse.data));\n                    }\n                } else {\n                    // if you are here u have to find the details!\n                }\n            }\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CouponDetails\">\n                <Typography variant=\"h3\" paragraph><i><b>\"{this.state.coupon?.title}\"</b></i>\" Details</Typography>\n                <img src={imageNotAvailable} alt=\"Coupon Details\" />\n                {/* <img src={this.state.coupon?.image} alt=\"Coupon Details\" /> */}\n                <Typography variant=\"h5\" paragraph color=\"secondary\"><b>ID:</b> <i>{this.state.coupon?.id}</i></Typography>\n                <Typography variant=\"h5\" paragraph color=\"secondary\"><b>Company ID:</b> <i>{this.state.coupon?.companyId}</i></Typography>\n                <Typography variant=\"h5\" paragraph color=\"secondary\"><b>Category:</b> <i>{this.state.coupon?.category}</i></Typography>\n                <Typography variant=\"h5\" paragraph color=\"secondary\"><b>Description:</b> <i>{this.state.coupon?.description}</i></Typography>\n                <Typography variant=\"h5\" paragraph color=\"secondary\"><b>Start Date:</b> <i>{this.state.coupon?.startDate}</i></Typography>\n                <Typography variant=\"h5\" paragraph color=\"secondary\"><b>End Date:</b> <i>{this.state.coupon?.endDate}</i></Typography>\n                <Typography variant=\"h5\" paragraph color=\"secondary\">\n                    <b>Amount:</b> <i>{this.state.coupon?.amount > 0 ? this.state.coupon?.amount : \"Out of Stock\"}</i>\n                </Typography>\n                <Typography variant=\"h5\" paragraph color=\"secondary\"><b>Price:</b> <i>$ {this.state.coupon?.price}</i></Typography>\n\n                <Button onClick={this.props.history.goBack} variant=\"contained\" color=\"primary\" startIcon={<ArrowBack />}>Back</Button>\n\n            </div>\n        );\n    }\n}\n\nexport default CouponDetails;\n","import { Typography } from \"@material-ui/core\";\nimport { Component } from \"react\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport UserModel from \"../../../Models/UserModel\";\nimport { companyDownloadedAction } from \"../../../Redux/CompanyAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport CouponCard from \"../CouponCard/CouponCard\";\nimport \"./CouponsListForCompany.css\";\n\ninterface CouponsListForCompanyState {\n    coupons: CouponModel[];\n}\n\nclass CouponsListForCompany extends Component<{}, CouponsListForCompanyState> {\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = { coupons: store.getState().companyAppState.company?.coupons };\n    }\n\n    public async componentDidMount() {\n        try {\n            if (store.getState().companyAppState.company === null) {\n                const id: number = (JSON.parse(localStorage.getItem(\"coupon-system-user\")) as UserModel).id;\n                const response = await jwtAxios.get<CompanyModel>(globalConfigs.urls.company + id + \"/get/details\");\n                this.setState({ coupons: response.data.coupons });\n                store.dispatch(companyDownloadedAction(response.data));\n            }\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CouponsListForCompany\">\n                <Typography variant=\"h4\">Coupons List ({this.state.coupons?.length})</Typography>\n                <div>\n                    {\n                        this.state.coupons?.length === 0 &&\n                        <Typography variant=\"body1\" paragraph>\n                            <br />\n                            <em> --- There are no coupons to display. Please post some first ;) --- </em>\n                        </Typography>\n                    }\n                    {\n                        this.state.coupons?.map(e => <CouponCard coupon={e} key={e.id} />)\n                    }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default CouponsListForCompany;\n","import { Typography } from \"@material-ui/core\";\nimport { Component } from \"react\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport UserModel from \"../../../Models/UserModel\";\nimport { customerDownloadedAction } from \"../../../Redux/CustomerAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport CouponCard from \"../CouponCard/CouponCard\";\nimport \"./CouponsListForCustomer.css\";\n\ninterface CouponsListForCustomerState {\n    coupons: CouponModel[];\n}\n\nclass CouponsListForCustomer extends Component<{}, CouponsListForCustomerState> {\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = { coupons: store.getState().customerAppState.customer?.coupons };\n    }\n\n    public async componentDidMount() {\n        try {\n            if (store.getState().customerAppState.customer === null) {\n                const id: number = (JSON.parse(localStorage.getItem(\"coupon-system-user\")) as UserModel).id;\n                const response = await jwtAxios.get<CustomerModel>(globalConfigs.urls.customer + id + \"/get/details\");\n                this.setState({ coupons: response.data.coupons });\n                store.dispatch(customerDownloadedAction(response.data));\n            }\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CouponsListForCustomer\">\n                <Typography variant=\"h4\">Coupons List ({this.state.coupons?.length})</Typography>\n                <div>\n                    {\n                        this.state.coupons?.length === 0 &&\n                        <Typography variant=\"body1\" paragraph>\n                            <br />\n                            <em> --- There are no coupons to display. Please purchase some first ;) --- </em>\n                        </Typography>\n                    }\n                    {\n                        this.state.coupons?.map(e => <CouponCard coupon={e} key={e.id} />)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CouponsListForCustomer;\n","import { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { companyCouponDeletedAction } from \"../../../Redux/CompanyAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface DeleteCouponProps extends RouteComponentProps<RouteParams> {\n\n}\n\nclass DeleteCoupon extends Component<DeleteCouponProps> {\n\n    public constructor(props: DeleteCouponProps) {\n        super(props);\n    }\n\n    public async componentDidMount() {\n        try {\n            const id: number = +this.props.match.params.id;\n            const response = await jwtAxios.delete<CouponModel>(globalConfigs.urls.company + \"delete/coupon?id=\" + id);\n            const deletedCoupon = response.data;\n            store.dispatch(companyCouponDeletedAction(id));\n            notify.success(\"Coupon \" + deletedCoupon.title + \" was deleted\");\n            this.props.history.push(\"/company/\" + store.getState().authAppState.user.id + \"/get/coupon/all\");\n        } catch (err) {\n            notify.error(err);\n            this.props.history.goBack();\n        }\n    }\n\n    public render(): JSX.Element {\n        return null;\n    }\n}\n\nexport default DeleteCoupon;\n","import { Button, FormControl, FormHelperText, InputLabel, MenuItem, Select, TextareaAutosize, TextField, Typography } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport CouponModel, { Category } from \"../../../Models/CouponModel\";\nimport { companyCouponUpdatedAction } from \"../../../Redux/CompanyAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./EditCoupon.css\";\n\nfunction EditCoupon(): JSX.Element {\n    const { register, handleSubmit, formState: { errors } } = useForm<CouponModel>();\n    const [category, setCategory] = useState<Category>(\"\" as unknown as Category);\n    const location = useLocation();\n    const history = useHistory();\n    const selectedCoupon = store.getState().companyAppState.company.coupons.find(e => e.id === location.state);\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategory(event.target.value as Category);\n    };\n\n    async function onSubmit(coupon: CouponModel) {\n        try {\n            if (coupon.startDate > coupon.endDate) {\n                notify.error(\"Start date must be before expiration date!\")\n            } else {\n                coupon.id = selectedCoupon.id;\n                coupon.companyId = store.getState().authAppState.user.id;\n                const response = await jwtAxios.put<CouponModel>(globalConfigs.urls.company + coupon.companyId + \"/update/coupon\", coupon);\n                const updateCoupon = response.data;\n                store.dispatch(companyCouponUpdatedAction(updateCoupon));\n                notify.success(\"Coupon \" + updateCoupon.title + \" was updated\");\n                history.goBack();\n            }\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    return (\n        <div className=\"EditCoupon\">\n            <Typography variant=\"h4\">Edit Coupon</Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <FormControl>\n                    <TextField {...register(\"title\", {\n                        required: { value: true, message: \"Missing title\" }\n                    })}\n                        label=\"Title\"\n                        type=\"text\"\n                        placeholder={selectedCoupon.title}\n                        required\n                        error={!!errors.title}\n                        helperText={errors.title?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel required shrink>Description</InputLabel>\n                    <TextareaAutosize {...register(\"description\", {\n                        required: { value: true, message: \"Missing description\" },\n                        minLength: { value: 4, message: \"Description must be al least 4 characters\" },\n                        maxLength: { value: 200, message: \"Description must be at most 200 characters\" }\n                    })}\n                        minRows={3}\n                        maxRows={3}\n                        aria-label=\"maximum height\"\n                        placeholder={selectedCoupon.description}\n                        required\n                    />\n                    <span style={{ color: \"red\" }}>{errors.description?.message}</span>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"amount\", {\n                        required: { value: true, message: \"Missing amount\" },\n                        min: { value: 0, message: \"Amount must be more or equals to 0\" },\n                        max: { value: 10000, message: \"Amount must be less or equals to 10_000\" }\n                    })}\n                        label=\"Amount\"\n                        type=\"number\"\n                        placeholder={selectedCoupon.amount.toString()}\n                        required\n                        error={!!errors.amount}\n                        helperText={errors.amount?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"price\", {\n                        required: { value: true, message: \"Missing price\" },\n                        min: { value: 0, message: \"Price must be more ore equals to 0\" },\n                        max: { value: 1000000, message: \"Price must be less or equals to 1_000_000.00\" }\n                    })}\n                        label=\"Price\"\n                        type=\"decimal\"\n                        placeholder={selectedCoupon.price.toString()}\n                        required\n                        error={!!errors.price}\n                        helperText={errors.price?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"startDate\", {\n                        required: { value: true, message: \"Missing start date\" },\n                        min: { value: new Date().toLocaleDateString(), message: \"Start date must be from today only\" },\n                    })}\n                        label=\"Start Date\"\n                        type=\"date\"\n                        required\n                        InputProps={{ placeholder: selectedCoupon.startDate }}\n                        InputLabelProps={{ shrink: true }}\n                        error={!!errors.startDate}\n                        helperText={errors.startDate?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <TextField {...register(\"endDate\", {\n                        required: { value: true, message: \"Missing expiration date\" },\n                        min: { value: new Date().toLocaleDateString(), message: \"Expiration date must be from today only\" },\n                    })}\n                        label=\"Expiration Date\"\n                        type=\"date\"\n                        required\n                        InputProps={{ placeholder: selectedCoupon.endDate }}\n                        InputLabelProps={{ shrink: true }}\n                        error={!!errors.endDate}\n                        helperText={errors.endDate?.message}\n                    />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel required shrink>Category</InputLabel>\n                    <Select {...register(\"category\", { required: true })}\n                        value={category}\n                        displayEmpty\n                        error={!!errors.category}\n                        onChange={handleChange}\n                    >\n                        <MenuItem selected disabled value=\"\">\n                            <em>Select Category</em>\n                        </MenuItem>\n                        <MenuItem value={Category.CLOTHING}>Clothing</MenuItem>\n                        <MenuItem value={Category.EDUCATION}>Education</MenuItem>\n                        <MenuItem value={Category.ELECTRICITY}>Electricity</MenuItem>\n                        <MenuItem value={Category.HEALTHY}>Healthy</MenuItem>\n                        <MenuItem value={Category.RESTAURANT}>Restaurant</MenuItem>\n                        <MenuItem value={Category.SPORT}>Sport</MenuItem>\n                        <MenuItem value={Category.VACATION}>Vacation</MenuItem>\n                    </Select>\n                    <FormHelperText>Select Coupon Category</FormHelperText>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel required shrink>Image</InputLabel><br />\n                    <input {...register(\"imageFile\", {\n                        required: { value: true, message: \"Missing image\" }\n                    })}\n                        type=\"file\"\n                        accept=\"image/*\"\n                        required\n                    />\n                    <span style={{ color: \"red\" }}>{errors.imageFile?.message}</span>\n                </FormControl>\n\n                <br /><br />\n                <div>\n                    <Button type=\"submit\" color=\"primary\" variant=\"contained\">Update</Button>\n                    <Button onClick={history.goBack} color=\"secondary\" variant=\"contained\" startIcon={<ArrowBack />}>Cancel</Button>\n                </div>\n\n            </form>\n        </div>\n    );\n}\n\nexport default EditCoupon;\n","import { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { customerMadePurchaseAction } from \"../../../Redux/CustomerAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface PurchaseCouponProps extends RouteComponentProps<RouteParams> {\n\n}\n\nclass PurchaseCoupon extends Component<PurchaseCouponProps> {\n\n    public constructor(props: PurchaseCouponProps) {\n        super(props);\n    }\n\n    public async componentDidMount() {\n        try {\n            const couponId: number = +this.props.location.state;\n            const customerId: number = +this.props.match.params.id;\n            let couponToPurchase: CouponModel = store.getState().customerAppState.customer?.coupons.find(c => c.id === couponId);\n\n            if (!couponToPurchase) {\n                const resp = await jwtAxios.get<CouponModel>(globalConfigs.urls.customer + \"get/coupon?id=\" + couponId);\n                couponToPurchase = resp.data;\n            }\n\n            const response = await jwtAxios.put<CouponModel>(globalConfigs.urls.customer + customerId + \"/purchase/\", couponToPurchase);\n            const purchasedCoupon: CouponModel = response.data;\n            store.dispatch(customerMadePurchaseAction(purchasedCoupon));\n\n            if (store.getState().couponsAppState.coupons.length > 0) {\n                const index = store.getState().couponsAppState.coupons.findIndex(e => e.id === purchasedCoupon.id);\n                if (index !== -1) { }\n                store.getState().couponsAppState.coupons[index] = { ...purchasedCoupon };\n            }\n\n            notify.success(\"Thank you for purchasing \\\"\" + purchasedCoupon.title + \"\\\" coupon\");\n            this.props.history.push(\"/customer/\" + customerId + \"/get/coupon/all\");\n        } catch (err) {\n            notify.error(err);\n            this.props.history.goBack();\n        }\n    }\n\n    public render(): JSX.Element {\n        return null;\n    }\n}\n\nexport default PurchaseCoupon;\n","import { Button, FormControl, TextField, Typography } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport { customerAddedAction } from \"../../../Redux/CustomersAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./AddCustomer.css\";\n\nfunction AddCustomer(): JSX.Element {\n\n    const { register, handleSubmit, formState: { errors } } = useForm<CustomerModel>();\n    const history = useHistory();\n\n    async function onSubmit(customer: CustomerModel) {\n        try {\n            const response = await jwtAxios.post<CustomerModel>(globalConfigs.urls.admin + \"add/customer\", customer);\n            const addedCustomer = response.data;\n            store.dispatch(customerAddedAction(addedCustomer));\n            history.push(\"/admin/get/customer/all\");\n            notify.success(\"Customer [\" + addedCustomer.id + \":\" + addedCustomer.firstName + \"-\" + addedCustomer.lastName + \"] added\");\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    return (\n        <div className=\"AddCustomer\">\n            <Typography variant=\"h4\">Add Customer</Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <FormControl>\n                    <TextField {...register(\"firstName\", {\n                        required: { value: true, message: \"Missing first name\" },\n                        minLength: { value: 2, message: \"First name must be at least 2 characters\" },\n                        maxLength: { value: 30, message: \"First name must be at most 30 characters\" }\n                    })}\n                        label=\"First Name\"\n                        type=\"text\"\n                        placeholder=\"Enter first name\"\n                        required\n                        error={!!errors.firstName}\n                        helperText={errors.firstName?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"lastName\", {\n                        required: { value: true, message: \"Missing last name\" },\n                        minLength: { value: 2, message: \"Last name must be at least 2 characters\" },\n                        maxLength: { value: 30, message: \"Last name must be at most 30 characters\" }\n                    })}\n                        label=\"Last Name\"\n                        type=\"text\"\n                        placeholder=\"Enter last name\"\n                        required\n                        error={!!errors.lastName}\n                        helperText={errors.lastName?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"email\", {\n                        required: { value: true, message: \"Missing email\" }\n                    })}\n                        label=\"Email\"\n                        type=\"email\"\n                        placeholder=\"Enter email\"\n                        required\n                        error={!!errors.email}\n                        helperText={errors.email?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"password\", {\n                        required: { value: true, message: \"Password missing\" },\n                        minLength: { value: 4, message: \"Password must be at least 4 characters\" },\n                        maxLength: { value: 30, message: \"Password must at most 30 characters\" }\n                    })}\n                        label=\"Password\"\n                        type=\"password\"\n                        placeholder=\"Enter password\"\n                        required\n                        error={!!errors.password}\n                        helperText={errors.password?.message}\n                    />\n                </FormControl>\n\n                <br /><br />\n                <div>\n                    <Button type=\"submit\" color=\"primary\" variant=\"contained\">Add</Button>\n                    <NavLink to=\"/admin/get/customer/all\" exact>\n                        <Button color=\"secondary\" variant=\"contained\">Cancel</Button>\n                    </NavLink>\n                </div>\n\n            </form>\n\n        </div>\n    );\n}\n\nexport default AddCustomer;\n","import { Button, Typography } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport CouponCard from \"../../CouponArea/CouponCard/CouponCard\";\nimport \"./CustomerDetails.css\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface CustomerDetailsProps extends RouteComponentProps<RouteParams> {\n\n}\n\ninterface CustomerDetailsState {\n    customer: CustomerModel;\n}\n\nclass CustomerDetails extends Component<CustomerDetailsProps, CustomerDetailsState> {\n\n    private currId: number = +this.props.match.params.id;\n\n    public constructor(props: CustomerDetailsProps) {\n        super(props);\n        this.state = { customer: store.getState().customersAppState.customers.find(c => c.id === this.currId) };\n    }\n\n    public async componentDidMount() {\n        try {\n            if (store.getState().customersAppState.customers.length === 0) {\n                const response = await jwtAxios.get<CustomerModel>(globalConfigs.urls.admin + \"get/customer?id=\" + this.currId);\n                this.setState({ customer: response.data });\n            }\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CustomerDetails\">\n                <Typography variant=\"h3\"><i><b>\"{this.state.customer?.firstName + \" \" + this.state.customer?.lastName}\"</b></i> Details</Typography>\n\n                <Typography variant=\"h5\" paragraph><b>ID:</b> <i>{this.state.customer?.id}</i></Typography>\n                <Typography variant=\"h5\" paragraph><b>First Name:</b> <i>{this.state.customer?.firstName}</i></Typography>\n                <Typography variant=\"h5\" paragraph><b>Last Name:</b> <i>{this.state.customer?.lastName}</i></Typography>\n                <Typography variant=\"h5\" paragraph><b>Email:</b> <i>{this.state.customer?.email}</i></Typography>\n                <Typography variant=\"h5\" paragraph><b>Password:</b> <i>{this.state.customer?.password}</i></Typography>\n\n                <Typography variant=\"h4\">Available Coupons ({this.state.customer?.coupons.length}):</Typography>\n                <div>\n                    {\n                        this.state.customer?.coupons.length === 0 &&\n                        <Typography variant=\"body1\" paragraph><br /><em> --- Coupons not purchased yet --- </em></Typography>\n                    }\n                    {\n                        this.state.customer?.coupons.map(e => <CouponCard coupon={e} key={e.id} />)\n                    }\n                </div>\n\n                <Button onClick={this.props.history.goBack} variant=\"contained\" color=\"primary\" startIcon={<ArrowBack />}>Back</Button>\n\n            </div>\n        );\n    }\n}\n\nexport default CustomerDetails;\n","import { Button, Typography } from \"@material-ui/core\";\r\nimport { AddBox, ArrowBack, DeleteForever, Edit, RemoveRedEyeOutlined } from \"@material-ui/icons\";\r\nimport { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport CustomerModel from \"../../../Models/CustomerModel\";\r\nimport { customersDownloadedAction } from \"../../../Redux/CustomersAppState\";\r\nimport store from \"../../../Redux/Store\";\r\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\r\nimport jwtAxios from \"../../../Services/jwtAxios\";\r\nimport notify from \"../../../Services/Notifications\";\r\nimport \"./CustomersList.css\";\r\n\r\ninterface CustomersListState {\r\n    customers: CustomerModel[];\r\n}\r\n\r\nclass CustomersList extends Component<{}, CustomersListState> {\r\n\r\n    public constructor(props: {}) {\r\n        super(props);\r\n        this.state = { customers: store.getState().customersAppState.customers };\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            if (store.getState().customersAppState.customers.length === 0) {\r\n                const response = await jwtAxios.get<CustomerModel[]>(globalConfigs.urls.admin + \"get/customer/all\");\r\n                this.setState({ customers: response.data });\r\n                store.dispatch(customersDownloadedAction(response.data));\r\n            }\r\n        } catch (err) {\r\n            notify.error(err);\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"CustomersList\">\r\n\r\n                <table>\r\n                    <caption><Typography variant=\"h3\">Customers List ({this.state.customers.length})</Typography></caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Firs Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Email</th>\r\n                            <th>Password</th>\r\n                            <th>Coupons</th>\r\n                            <th>Details</th>\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.customers.map(customer =>\r\n                                <tr key={customer.id} className=\"TableBodyRow\">\r\n                                    <td>{customer.id}</td>\r\n                                    <td>{customer.firstName}</td>\r\n                                    <td>{customer.lastName}</td>\r\n                                    <td>{customer.email}</td>\r\n                                    <td>{customer.password}</td>\r\n                                    <td>{customer.coupons?.length}</td>\r\n                                    <td>{\r\n                                        <NavLink\r\n                                            to={\"/admin/get/customer/\" + customer.id}\r\n                                            title=\"View Customer Details\" exact><RemoveRedEyeOutlined />\r\n                                        </NavLink>\r\n                                    }</td>\r\n                                    <td>{\r\n                                        <NavLink\r\n                                            to={{ pathname: \"/admin/update/customer\", state: customer.id }}\r\n                                            title=\"Edit Customer\" exact><Edit />\r\n                                        </NavLink>\r\n                                    }</td>\r\n                                    <td>{\r\n                                        <NavLink\r\n                                            to={\"/admin/delete/customer/\" + customer.id}\r\n                                            title=\"Delete Customer\" exact><DeleteForever />\r\n                                        </NavLink>\r\n                                    }</td>\r\n                                </tr>)\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n\r\n                <br />\r\n                <NavLink to=\"/admin/add/customer\" exact>\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<AddBox />}>Add Customer</Button>\r\n                </NavLink>\r\n\r\n                <NavLink to=\"/home\" exact>\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<ArrowBack />}>Home</Button>\r\n                </NavLink>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default CustomersList;","import { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport { customerDeletedAction } from \"../../../Redux/CustomersAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface DeleteCustomerProps extends RouteComponentProps<RouteParams> {\n\n}\n\nclass DeleteCustomer extends Component<DeleteCustomerProps> {\n\n    public constructor(props: DeleteCustomerProps) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        try {\n            const id: number = +this.props.match.params.id;\n            const response = await jwtAxios.delete<CustomerModel>(globalConfigs.urls.admin + \"delete/customer?id=\" + id);\n            const deletedCustomer = response.data;\n            store.dispatch(customerDeletedAction(id));\n            notify.success(\"Customer \" + deletedCustomer.firstName + \" \" + deletedCustomer.lastName + \" deleted.\")\n            this.props.history.push(\"/admin/get/customer/all\");\n        } catch (err) {\n            notify.error(err);\n            this.props.history.goBack();\n        }\n    }\n\n    public render(): JSX.Element {\n        return null;\n    }\n}\n\nexport default DeleteCustomer;\n","import { Button, FormControl, TextField, Typography } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { NavLink, useHistory, useLocation } from \"react-router-dom\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport { customerUpdatedAction } from \"../../../Redux/CustomersAppState\";\nimport store from \"../../../Redux/Store\";\nimport globalConfigs from \"../../../Services/GlobalConfigs\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./EditCustomer.css\";\n\nfunction EditCustomer(): JSX.Element {\n    const { register, handleSubmit, formState: { errors } } = useForm<CustomerModel>();\n    const history = useHistory();\n    const location = useLocation();\n    const selectedCustomer = store.getState().customersAppState.customers.find(c => c.id === location.state);\n\n    async function onSubmit(customer: CustomerModel) {\n        try {\n            customer.id = selectedCustomer.id;\n            const response = await jwtAxios.put<CustomerModel>(globalConfigs.urls.admin + \"update/customer\", customer);\n            const updatedCustomer = response.data;\n            store.dispatch(customerUpdatedAction(updatedCustomer));\n            notify.success(\"Customer \" + selectedCustomer.firstName + \" \" + selectedCustomer.lastName + \" was updated!\");\n            history.push(\"/admin/get/customer/all\");\n        } catch (err) {\n            notify.error(err);\n        }\n    }\n\n    return (\n        <div className=\"EditCustomer\">\n            <Typography variant=\"h4\">Edit: \"{selectedCustomer.firstName + \" \" + selectedCustomer.lastName}\"</Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <FormControl>\n                    <TextField {...register(\"firstName\", {\n                        required: { value: true, message: \"Missing first name\" },\n                        minLength: { value: 2, message: \"First name must be at least 2 characters\" },\n                        maxLength: { value: 30, message: \"First name must be at most 30 characters\" }\n                    })}\n                        label=\"First Name\"\n                        type=\"text\"\n                        placeholder={selectedCustomer.firstName}\n                        required\n                        error={!!errors.firstName}\n                        helperText={errors.firstName?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"lastName\", {\n                        required: { value: true, message: \"Missing last name\" },\n                        minLength: { value: 2, message: \"Last name must be at least 2 characters\" },\n                        maxLength: { value: 30, message: \"Last name must be at most 30 characters\" }\n                    })}\n                        label=\"Last Name\"\n                        type=\"text\"\n                        placeholder={selectedCustomer.lastName}\n                        required\n                        error={!!errors.lastName}\n                        helperText={errors.lastName?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"email\", {\n                        required: { value: true, message: \"Missing email\" }\n                    })}\n                        label=\"Email\"\n                        type=\"email\"\n                        placeholder={selectedCustomer.email}\n                        required\n                        error={!!errors.email}\n                        helperText={errors.email?.message}\n                    />\n                </FormControl>\n\n                <FormControl>\n                    <TextField {...register(\"password\", {\n                        required: { value: true, message: \"Password missing\" },\n                        minLength: { value: 4, message: \"Password must be at least 4 characters\" },\n                        maxLength: { value: 30, message: \"Password must at most 30 characters\" }\n                    })}\n                        label=\"Password\"\n                        type=\"password\"\n                        placeholder={selectedCustomer.password}\n                        required\n                        error={!!errors.password}\n                        helperText={errors.password?.message}\n                    />\n                </FormControl>\n\n                <br /><br />\n                <div>\n                    <Button type=\"submit\" color=\"primary\" variant=\"contained\">Update</Button>\n                    <NavLink to=\"/admin/get/customer/all\" exact>\n                        <Button color=\"secondary\" variant=\"contained\">Cancel</Button>\n                    </NavLink>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default EditCustomer;\n","import { Typography } from \"@material-ui/core\";\nimport store from \"../../../Redux/Store\";\nimport \"./Home.css\";\n\nfunction Home(): JSX.Element {\n    return (\n        <div className=\"Home\">\n            {\n                store.getState().authAppState.user === null &&\n                <Typography paragraph variant=\"h3\">Greetings <b><i>Guest</i></b></Typography>\n            }\n            {\n                store.getState().authAppState.user?.clientType &&\n                <Typography paragraph variant=\"h3\">\n                    Greetings <b><i>{store.getState().authAppState.user.name}</i></b>\n                </Typography>\n            }\n\n            <br />\n            <Typography variant=\"h3\" paragraph>Welcome to Coupons System Website!</Typography>\n            <br />\n            <Typography variant=\"h3\" paragraph>The Best Web Site to Buy/Sell coupons!</Typography>\n        </div>\n    );\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/page_404.76c13541.png\";","import { Button, Typography } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useHistory } from \"react-router-dom\";\nimport PageNotFoundImage from \"../../../Assets/Images/Status/page_404.png\";\nimport \"./Page404.css\";\n\nfunction Page404(): JSX.Element {\n    const history = useHistory();\n\n    return (\n        <div className=\"Page404\">\n            <Typography variant=\"h1\">Page 404</Typography>\n            <img src={PageNotFoundImage} alt=\"Page 404 - Page Not found!\" />\n            <p>The page you are trying to surf doesn't exists!</p>\n\n            <Button onClick={history.goBack} variant=\"contained\" color=\"primary\" startIcon={<ArrowBack />}>Back</Button>\n        </div>\n    );\n}\n\nexport default Page404;\n","import { Typography } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./About.css\";\n\nfunction About(): JSX.Element {\n    return (\n        <div className=\"About\">\n            <br />\n            <Typography variant=\"h4\" paragraph>\n                This is coupon web site provides options to sell and purchase coupons...\n            </Typography>\n            <br />\n            <Typography paragraph>\n                Please follow the link\n                <NavLink to=\"/contact-us\" exact>Contact Us</NavLink>\n                for more information.\n            </Typography>\n        </div>\n    );\n}\n\nexport default About;\n","import { Typography } from \"@material-ui/core\";\nimport { Email, Facebook, Instagram, Phone, Print, Twitter } from \"@material-ui/icons\";\nimport \"./ContactUs.css\";\n\nfunction ContactUs(): JSX.Element {\n    return (\n        <div className=\"ContactUs\">\n            <br />\n            <Typography variant=\"h4\" paragraph>\n                Here how you can contact us:\n            </Typography>\n            <Typography paragraph><Email /> <b>Mail:</b> <i>coupons@mail.com</i></Typography>\n            <Typography paragraph><Phone /> <b>Phone:</b> <i>+123-1234567890</i></Typography>\n            <Typography paragraph><Print /> <b>Fax:</b> <i>+123-1234567891</i></Typography>\n            <Typography paragraph><Facebook /> <b>Facebook:</b> <i>facebook</i> </Typography>\n            <Typography paragraph><Twitter /> <b>Twitter:</b> <i>twitter</i> </Typography>\n            <Typography paragraph><Instagram /> <b>Instagram:</b> <i>instagram</i> </Typography>\n        </div>\n    );\n}\n\nexport default ContactUs;\n","import { Redirect, Route, Switch } from \"react-router-dom\";\nimport Login from \"../../AuthArea/Login/Login\";\nimport Logout from \"../../AuthArea/Logout/Logout\";\nimport AddCompany from \"../../CompanyArea/AddCompany/AddCompany\";\nimport CompaniesList from \"../../CompanyArea/CompaniesList/CompaniesList\";\nimport CompanyDetails from \"../../CompanyArea/CompanyDetails/CompanyDetails\";\nimport DeleteCompany from \"../../CompanyArea/DeleteCompany/DeleteCompany\";\nimport EditCompany from \"../../CompanyArea/EditCompany/EditCompany\";\nimport AddCoupon from \"../../CouponArea/AddCoupon/AddCoupon\";\nimport AllAvailableCoupons from \"../../CouponArea/AllAvailableCoupons/AllAvailableCoupons\";\nimport CouponDetails from \"../../CouponArea/CouponDetails/CouponDetails\";\nimport CouponsListForCompany from \"../../CouponArea/CouponsListForCompany/CouponsListForCompany\";\nimport CouponsListForCustomer from \"../../CouponArea/CouponsListForCustomer/CouponsListForCustomer\";\nimport DeleteCoupon from \"../../CouponArea/DeleteCoupon/DeleteCoupon\";\nimport EditCoupon from \"../../CouponArea/EditCoupon/EditCoupon\";\nimport PurchaseCoupon from \"../../CouponArea/PurchaseCoupon/PurchaseCoupon\";\nimport AddCustomer from \"../../CustomerArea/AddCustomer/AddCustomer\";\nimport CustomerDetails from \"../../CustomerArea/CustomerDetails/CustomerDetails\";\nimport CustomersList from \"../../CustomerArea/CustomersList/CustomersList\";\nimport DeleteCustomer from \"../../CustomerArea/DeleteCustomer/DeleteCustomer\";\nimport EditCustomer from \"../../CustomerArea/EditCustomer/EditCustomer\";\nimport Home from \"../../HomeArea/Home/Home\";\nimport Page404 from \"../../SharedArea/Page404/Page404\";\nimport About from \"../About/About\";\nimport ContactUs from \"../ContactUs/ContactUs\";\n\nfunction Routing(): JSX.Element {\n    return (\n        <div className=\"Routing\">\n            <Switch>\n                <Route path=\"/home\" component={Home} exact />\n\n                {/* - Admin - */}\n                <Route path=\"/admin/get/company/all\" component={CompaniesList} exact />\n                <Route path=\"/admin/get/customer/all\" component={CustomersList} exact />\n                <Route path=\"/admin/add/company\" component={AddCompany} exact />\n                <Route path=\"/admin/add/customer\" component={AddCustomer} exact />\n                <Route path=\"/admin/update/company\" component={EditCompany} exact />\n                <Route path=\"/admin/update/customer\" component={EditCustomer} exact />\n                <Route path=\"/admin/delete/company/:id\" component={DeleteCompany} exact />\n                <Route path=\"/admin/delete/customer/:id\" component={DeleteCustomer} exact />\n                <Route path=\"/admin/get/company/:id\" component={CompanyDetails} exact />\n                <Route path=\"/admin/get/customer/:id\" component={CustomerDetails} exact />\n\n                {/* - Company - */}\n                <Route path=\"/company/:id/get/coupon/all\" component={CouponsListForCompany} exact />\n                <Route path=\"/company/:id/add/coupon\" component={AddCoupon} exact />\n                <Route path=\"/company/:id/update/coupon\" component={EditCoupon} exact />\n                <Route path=\"/company/delete/coupon/:id\" component={DeleteCoupon} exact />\n                <Route path=\"/company/get/coupon/:id\" component={CouponDetails} exact />\n                <Route path=\"/company/:id/get/details\" component={CompanyDetails} exact />\n\n                {/* - Customer - */}\n                <Route path=\"/customer/get/coupon/all\" component={AllAvailableCoupons} exact />\n                <Route path=\"/customer/:id/get/coupon/all\" component={CouponsListForCustomer} exact />\n                <Route path=\"/customer/get/coupon/:id\" component={CouponDetails} exact />\n                <Route path=\"/customer/:id/purchase\" component={PurchaseCoupon} exact />\n                <Route path=\"/customer/:id/get/details\" component={CustomerDetails} exact />\n\n                {/* - Login / Logout - */}\n                <Route path=\"/login\" component={Login} exact />\n                <Route path=\"/logout\" component={Logout} exact />\n\n                {/* - Guest - */}\n                <Route path=\"/about\" component={About} exact />\n                <Route path=\"/contact-us\" component={ContactUs} exact />\n\n\n                <Redirect from=\"/\" to=\"/home\" exact />\n                <Route component={Page404} />\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routing;\n","import { Component } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Unsubscribe } from \"redux\";\nimport { ClientType } from \"../../../Models/CredentialsModel\";\nimport UserModel from \"../../../Models/UserModel\";\nimport store from \"../../../Redux/Store\";\nimport AdminMenu from \"../../AdminArea/AdminMenu/AdminMenu\";\nimport CompanyMenu from \"../../CompanyArea/CompanyMenu/CompanyMenu\";\nimport CustomerMenu from \"../../CustomerArea/CustomerMenu/CustomerMenu\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Logo from \"../Logo/Logo\";\nimport MainMenu from \"../MainMenu/MainMenu\";\nimport Routing from \"../Routing/Routing\";\nimport \"./Layout.css\";\n\ninterface LayoutState {\n    currentUser: UserModel;\n}\n\nclass Layout extends Component<{}, LayoutState> {\n\n    private unsubscribeMe: Unsubscribe;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = { currentUser: store.getState().authAppState.user };\n    }\n\n    public componentDidMount(): void {\n        this.unsubscribeMe = store.subscribe(() => {\n            this.setState({ currentUser: store.getState().authAppState.user });\n        });\n    }\n\n    public componentWillUnmount(): void {\n        this.unsubscribeMe();\n    }\n\n    public render(): JSX.Element {\n        return <div className=\"Layout\">\n\n            <BrowserRouter>\n                <header>\n                    <Logo />\n                    <Header />\n                </header>\n\n                <aside>\n\n                    {\n                        // Main Menu\n                        this.state.currentUser === null &&\n                        <MainMenu />\n                    }\n                    {\n                        // Admin Menu\n                        this.state.currentUser?.clientType === ClientType.ADMINISTRATOR &&\n                        <AdminMenu />\n                    }\n                    {\n                        // Company Menu\n                        this.state.currentUser?.clientType === ClientType.COMPANY &&\n                        <CompanyMenu />\n                    }\n                    {\n                        // Customer Menu\n                        this.state.currentUser?.clientType === ClientType.CUSTOMER &&\n                        <CustomerMenu />\n                    }\n                </aside>\n\n                <main>\n                    <Routing />\n                </main>\n\n                <footer>\n                    <Footer />\n                </footer>\n\n            </BrowserRouter>\n        </div>\n    }\n}\n\nexport default Layout;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Layout from './Components/LayoutArea/Layout/Layout';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Layout />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}